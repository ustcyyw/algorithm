/**
 * @Time : 2024/11/11-3:00 PM
 * @Author : yyw@ustc
 * @E-mail : yang0@mail.ustc.edu.cn
 * @Github : https://github.com/ustcyyw
 * @desc : CF1931G
 */
#include<bits/stdc++.h>

using namespace std;
typedef unsigned long long ull;
typedef long long ll;
const int N = 2e6 + 5, mod = 998244353;
int T, c1, c2, c3, c4;

/*
 * 3和4无法互相接 只能接在1或者2
 * 但是3和4接在1或者2上，不改变1和2的凹凸性
 * 1 -> 1-3 保持左右两边凸起
 * 1 -> 4-1 保持左右两边凸起
 * 2 -> 2-4 保持左右两边凹陷
 * 2 -> 3-2 保持左右两边凹陷
 * 相当于3、4拼接到1或者2上 还是等价于1和2（长度变长了 但是左右的凹凸性保持不变）
 * 又因为3和4无法互相接 那么最后的拼接等价于是1和2的拼接
 * 1和2的拼接 必须交替拼接 那么 abs(c1 - c2) <= 1才能最终拼接成 否则就会剩下
 * 于是在可以拼接完成的前提下 考虑方案数
 *
 * 1和2的交替拼接
 * 如果c1 = c2 + 1，方块1就必须出现在两端 只有一种交替顺序
 * c2 = c1 + 1，同理
 * 但是如果c1 = c2， 那么交替顺序就有两种 1212... 或者2121...
 *
 * 在1、2的交替序列中 1-3-2，2-4-1 的组合可以完成拼接
 * 因为3、4拼接上去后的整体可以视为等价的1和2 因此3和4的拼接独立考虑
 *
 * 考虑3和4的拼接
 * 1. c1 = c2 + 1 序列为 12121...1
 * 共有c1个位置可以放3 就是每个1的右侧
 * 共有c1个位置可以放4 就是每个1的左侧
 * 3和4都可以放置在任意一个可行位置0块、1块、多块
 *
 * 问题转化为 将x个相同物品 放入个相同的y个箱子中 允许某个箱子为空也允许某个箱子放多个物品
 * 这里使用隔板法
 * 将x个相同的物品 放入y个相同的箱子中 允许某个箱子为空也允许某个箱子放多个物品
 * 可以想象成 有x + y - 1个空白点 然后将其中 y-1 个点放置隔板
 * 有 y-1 个隔板，就划分出了y个箱子。并且剩余的x个空白点 就是要分配的物品
 * 两个隔板之间的空白点 就是放入某个箱子中的物品数量
 * 其中第一个板子左边、最后一个板子右边的空白点 就是放入第一个、最后一个箱子的物品
 * 相邻的两个隔板之间就意味着对应的箱子不放入物品
 * 因此所有可能的方案数就是 组合数C(x + y - 1, y - 1)
 *
 * 所以答案是 C(c1 + c3 - 1, c1 - 1) * C(c1 + c4 - 1, c1 - 1)
 *
 * 2. c2 = c1 + 1 序列为 21212...2
 * 共有c2个位置放3，就是每个2的左侧
 * 共有c2个位置放4，就是每个2的右侧
 * 答案是 C(c2 + c3 - 1, c2 - 1) * C(c2 + c4 - 1, c2 - 1)
 *
 * 3. c1 = c2
 * 序列为 121212.. 时
 * 可以有c1个位置放3 每个1的右侧
 * 可以有c1+1个位置放4 每个1的左侧和最后一个2的右侧
 * 答案时 C(c1 + c3 - 1, c1 - 1) * C(c1 + 1 + c4 - 1, c1)
 * 序列为 212121..时
 * 可以有c1+1个位置放3 每个2的左侧和最后一个1的右侧
 * 可以有c1个位置放4 每个2的右
 * 答案时 C(c1 + 1 + c3 - 1, c1) * C(c1 + c4 - 1, c1 - 1)
 */

ll qPow(ll x, ll y) {
    ll ans = 1;
    while (y) {
        if (y & 1) ans = ans * x % mod;
        y >>= 1;
        x = x * x % mod;
    }
    return ans;
}

// 预处理阶乘 和 阶乘的逆元
ll x[N], invF[N];
int init = []() -> int {
    x[0] = 1;
    invF[0] = qPow(1, mod - 2);
    for (int i = 1; i < N; i++) {
        x[i] = x[i - 1] * i % mod;
        invF[i] = qPow(x[i], mod - 2);
    }
    return 0;
}();

// 组合数 C(n,a) n个元素取a个
ll C(int n, int a) {
    return x[n] * invF[n - a] % mod * invF[a] % mod;
}

// A(n,a) n个元素取a个并且全排列
ll A(int n, int a) {
    return x[n] * invF[n - a] % mod;
}

ll solve() {
    if(abs(c1 - c2) > 1) return 0;
    if(c1 + c2 == 0) {
        if(c3 == 0 || c4 == 0) return 1; // 都是3或者4 有唯一的拼法
        return 0; // 没有1和2，但是3、4都有 他们没发互相拼接
    }
    if(c1 == c2 + 1)
        return C(c1 + c3 - 1, c1 - 1) * C(c1 + c4 - 1, c1 - 1) % mod;
    if(c2 == c1 + 1)
        return C(c2 + c3 - 1, c2 - 1) * C(c2 + c4 - 1, c2 - 1) % mod;
    return C(c1 + c3 - 1, c1 - 1) * C(c1 + 1 + c4 - 1, c1) % mod
           + C(c1 + 1 + c3 - 1, c1) * C(c1 + c4 - 1, c1 - 1) % mod;
}

int main() {
    ios::sync_with_stdio(0); cin.tie(0), cout.tie(0); // 加速cin, cout
    cin >> T;
    while (T-- > 0) {
        cin >> c1 >> c2 >> c3 >> c4;
        cout << solve() % mod << "\n";
    }
};